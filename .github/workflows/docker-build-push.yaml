# name: Build and Push Docker Images

# on:
#    push:
#       branches:
#          - main

# env:
#    IMAGE_NAME_SERVER: adamb00/rr-server
#    IMAGE_NAME_CLIENT: adamb00/rr-client
#    TAG_NAME: latest

# jobs:
#    build-and-push:
#       runs-on: ubuntu-latest

#       steps:
#          - name: Checkout repository
#            uses: actions/checkout@v2

#          - name: Login to Docker Hub
#            uses: docker/login-action@v2
#            with:
#               username: ${{ secrets.DOCKERHUB_USERNAME }}
#               password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

#          - name: Build and push Docker images for server
#            run: |
#               echo "${{ secrets.ENV_FILE }}" >> $GITHUB_ENV
#               docker build -t $IMAGE_NAME_SERVER:$TAG_NAME ./server
#               docker push $IMAGE_NAME_SERVER:$TAG_NAME

#          - name: Build and push Docker images for client
#            run: |
#               echo "${{ secrets.ENV_FILE }}" >> $GITHUB_ENV
#               docker build -t $IMAGE_NAME_CLIENT:$TAG_NAME ./client
#               docker push $IMAGE_NAME_CLIENT:$TAG_NAME

#    deploy-to-digitalocean:
#       runs-on: ubuntu-latest
#       needs: build-and-push

#       steps:
#          - name: Checkout repository
#            uses: actions/checkout@v2

#          - name: Debug
#            run: |
#               echo "IMAGE_NAME_SERVER: $IMAGE_NAME_SERVER"
#               echo "IMAGE_NAME_CLIENT: $IMAGE_NAME_CLIENT"
#               echo "TAG_NAME: $TAG_NAME"

#          - name: SSH into DigitalOcean droplet
#            uses: appleboy/ssh-action@master
#            with:
#               host: ${{ secrets.DROPLET_HOST }}
#               username: ${{ secrets.DROPLET_USERNAME }}
#               key: ${{ secrets.DROPLET_SSH_KEY }}
#               port: ${{ secrets.DROPLET_SSH_PORT }}
#               passphrase: ${{ secrets.SSH_PASSPHRASE }}
#               script: |
#                  docker pull $IMAGE_NAME_SERVER:$TAG_NAME
#                  docker pull $IMAGE_NAME_CLIENT:$TAG_NAME
#                  docker run -d -p 8000:8000 $IMAGE_NAME_SERVER:$TAG_NAME
#                  docker run -d -p 5173:80 $IMAGE_NAME_CLIENT:$TAG_NAME

name: CI

# 1
# Controls when the workflow will run
on:
   # Triggers the workflow on push events but only for the master branch
   push:
      branches: main

   # Allows you to run this workflow manually from the Actions tab
   workflow_dispatch:
      inputs:
         version:
            description: 'Image version'
            required: true
#2
env:
   REGISTRY: 'registry.digitalocean.com/rr-registry'
   IMAGE_NAME: 'adamb00/rr-repository'

#3
jobs:
   build_and_push:
      runs-on: ubuntu-latest
      steps:
         - name: Checkout the repo
           uses: actions/checkout@v2

         - name: Build container image
           run: |
              cd docker
              docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

         - name: Install doctl
           uses: digitalocean/action-doctl@v2
           with:
              token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

         - name: Log in to DigitalOcean Container Registry with short-lived credentials
           run: doctl registry login --expiry-seconds 600

         - name: Remove all old images
           run: if [ ! -z "$(doctl registry repository list | grep "$(echo $IMAGE_NAME)")" ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o "sha.*") --force; else echo "No repository"; fi

         - name: Push image to DigitalOcean Container Registry
           run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

   deploy:
      runs-on: ubuntu-latest
      needs: build_and_push

      steps:
         - name: Deploy to Digital Ocean droplet via SSH action
           uses: appleboy/ssh-action@v0.1.3
           with:
              host: ${{ secrets.DROPLET_HOST }}
              username: ${{ secrets.DROPLET_USERNAME }}
              key: ${{ secrets.DROPLET_SSH_KEY }}
              port: ${{ secrets.DROPLET_SSH_PORT }}
              passphrase: ${{ secrets.SSH_PASSPHRASE }}
              envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
              script: |
                 # Login to registry
                 docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
                 # Stop running container
                 docker stop $(echo $IMAGE_NAME)
                 # Remove old container
                 docker rm $(echo $IMAGE_NAME)
                 # Run a new container from a new image
                 docker run -d \
                 --restart always \
                 --name $(echo $IMAGE_NAME) \
                 $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
